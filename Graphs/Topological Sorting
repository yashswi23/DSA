class Solution {
    
    public static void dfs(int node, List<List<Integer>> adj, Stack<Integer> st, int[] vis){
        vis[node]=1;
        
        for(Integer it: adj.get(node)){
            if(vis[it]== 0){
                dfs(it,adj,st,vis);
            }
        }
        st.add(node);
    }
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        // code here
        
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int edge[]: edges){
            int u = edge[0];
            int v = edge[1];
            
            adj.get(u).add(v);
        }
        
        int[] vis = new int[V];
        Stack<Integer> st = new Stack();
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,adj,st,vis);
            }
        }
        
        while(!st.isEmpty()){
            ans.add(st.pop());
        }
        
        return ans;
        
        
        
    }
}
