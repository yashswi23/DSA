class Solution {
    public void bfs(int node,List<List<Integer>> adj,boolean[] vis){
        Queue<Integer> q = new LinkedList<>();
       vis[node]=true;
       q.add(node);

       while(!q.isEmpty()){
        int temp = q.poll();

        for(Integer it: adj.get(temp)){
            if(vis[it] == false){
                q.add(it);
                vis[it]=true;
        }
        }
       }
    }
    public int findCircleNum(int[][] isConnected) {
        List<List<Integer>> adj = new ArrayList<>();
        int n = isConnected.length;
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1&& i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int count=0;
        boolean[] vis = new boolean[n];
        for(int i=0;i<n;i++){
            if(vis[i]== false){
                bfs(i,adj,vis);
                count++;

            }
        }
        return count;
    }
}
