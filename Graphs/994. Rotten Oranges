class Pair{
    int r;
    int c;
    int time;

    Pair(int r, int c, int t){
        this.r = r;
        this.c = c;
        this.time = t;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        List<List<Integer>> adj = new ArrayList<>();

        int n = grid.length;
        int m = grid[0].length;
        Queue<Pair> q = new LinkedList<Pair>();
        int[][] vis = new int[n][m];
        int cntfresh=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]== 2){
                    q.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }

                if(grid[i][j]==1){
                    cntfresh++;
                }
            }
        }

        int tm=0;
        int cnt=0;

        int[]delrow = {-1,0,1,0};
        int[]delcol={0,1,0,-1};
        while(!q.isEmpty()){
            int row = q.peek().r;
            int col = q.peek().c;
            int  t = q.peek().time;
            tm = Math.max(tm,t);

            q.remove();

            for(int i=0;i<4;i++){
                int newrow= row+delrow[i];
                int newcol = col+delcol[i];

                if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && grid[newrow][newcol]==1 && vis[newrow][newcol]==0){
                    q.add(new Pair(newrow,newcol,t+1));
                    vis[newrow][newcol]=2;
                    cnt++;
                }
            }

           
        }
        return cnt == cntfresh ? tm : -1;
    }
}
